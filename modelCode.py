# -*- coding: utf-8 -*-
"""trainAndtest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gi-pQluFviUj-ZrM6V_l89Ltn6GVTZVK
"""

from google.colab import drive 
drive.mount('/content/drive')

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

training_set = tf.keras.utils.image_dataset_from_directory( #traing image proccesing
    '/content/drive/MyDrive/archive (1)/train',
    labels='inferred',
    label_mode='categorical',
    class_names=None,
    color_mode='rgb',
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation='bilinear',
    follow_links=False,
    crop_to_aspect_ratio=False
)

#validation image set
validation_set=tf.keras.utils.image_dataset_from_directory( #traing image proccesing
    '/content/drive/MyDrive/archive (1)/validation',
    labels='inferred',
    label_mode='categorical',
    class_names=None,
    color_mode='rgb',
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation='bilinear',
    follow_links=False,
    crop_to_aspect_ratio=False
)

cnn = tf.keras.models.Sequential()#building model

cnn.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Dropout(0.5))#to avoid overfitting

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128,activation='relu'))

cnn.add(tf.keras.layers.Dense(units=36,activation='softmax'))#for output layer

cnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

training_history = cnn.fit(x=training_set, validation_data=validation_set, epochs=30)

#model save
cnn.save('trained_model.h5')

training_history.history #return history

#Recording History in json
import json
with open('training_hist.json','w') as f:
  json.dump(training_history.history,f)

print(training_history.history.keys())

#calculating accuracy of the model in validation set
print("Validation set Accuracy: {} %".format(training_history.history['val_accuracy'][-1]*100))

epochs = [i for i in range(1, 31)]  # adjust the range to match the length of training_history.history['accuracy']
plt.plot(epochs, training_history.history['accuracy'], color='red')

plt.plot(epochs,training_history.history['val_accuracy'],color='blue')
plt.xlabel('No. of Epochs')
plt.ylabel('Validation Accuracy')
plt.title('Visualization of Validation Accuracy Result')
plt.show()

cnn = tf.keras.models.load_model('/content/trained_model.h5')

#Test Image Visualization
import cv2
image_path = '/content/drive/MyDrive/archive (1)/test/eggplant/Image_1.jpg'
# Reading an image in default mode
img = cv2.imread(image_path)
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) #Converting BGR to RGB
# Displaying the image
plt.imshow(img)
plt.title('Test Image')
plt.xticks([])
plt.yticks([])
plt.show()

image = tf.keras.preprocessing.image.load_img(image_path,target_size=(64,64))
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])  # Convert single image to a batch.
predictions = cnn.predict(input_arr)

print(predictions)

test_set = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/archive (1)/test',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

test_set.class_names

result_index = np.argmax(predictions) #Return index of max element
print(result_index)

# Displaying the image
plt.imshow(img)
plt.title('Test Image')
plt.xticks([])
plt.yticks([])
plt.show()

#Single image Prediction
print("It's a {}".format(test_set.class_names[result_index]))